(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["jssExpand"] = factory();
	else
		root["jssExpand"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = jssExpand;
	
	var _props = __webpack_require__(1);
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	/**
	 * Map values by given prop.
	 *
	 * @param {Array} array of values
	 * @param {String} original property
	 * @param {String} original rule
	 * @return {String} mapped values
	 */
	function mapValuesByProp(value, prop, rule) {
	  return value.map(function (item) {
	    return objectToString(item, prop, rule);
	  });
	}
	
	/**
	 * Convert array to string.
	 *
	 * @param {Array} array of values
	 * @param {String} original property
	 * @param {Object} sheme, for converting arrays in strings
	 * @param {Object} original rule
	 * @return {String} converted string
	 */
	function arrayToString(value, prop, scheme, rule) {
	  if (value[0].constructor === Object) return mapValuesByProp(value, prop, rule);
	  if (scheme[prop] == null) return value.join(',');
	  if (value[0].constructor === Array) return arrayToString(value[0], prop, scheme);
	  return value.join(' ');
	}
	
	/**
	 * Convert object to string.
	 *
	 * @param {Object} object of values
	 * @param {String} original property
	 * @param {Object} original rule
	 * @return {String} converted string
	 */
	function objectToString(value, prop, rule) {
	  if (!(_props.propObj[prop] || _props.customPropObj[prop])) return '';
	
	  var result = [];
	
	  // Check if exists any non-standart property
	  if (_props.customPropObj[prop]) {
	    for (var baseProp in _props.customPropObj[prop]) {
	      var propName = _props.customPropObj[prop][baseProp];
	      // If current property doesn't exist alerady in rule - add new one
	      if (value[baseProp] && !rule.prop(propName)) {
	        rule.prop(propName, styleDetector(_defineProperty({}, propName, value[baseProp]), rule)[propName]);
	      }
	      delete value[baseProp];
	    }
	  }
	
	  // Pass throught all standart props
	  if (Object.keys(value).length !== 0) {
	    for (var _baseProp in _props.propObj[prop]) {
	      if (value[_baseProp]) {
	        if (value[_baseProp].constructor === Array) {
	          result.push(arrayToString(value[_baseProp], _baseProp, _props.propArrayInObj));
	        } else result.push(value[_baseProp]);
	        continue;
	      }
	
	      // Add default value from props config.
	      if (_props.propObj[prop][_baseProp] != null) {
	        result.push(_props.propObj[prop][_baseProp]);
	      }
	    }
	  }
	
	  return result.join(' ');
	}
	
	/**
	 * Detect if a style needs to be converted.
	 *
	 * @param {Object} style
	 * @param {Object} rule
	 * @return {Object} convertedStyle
	 */
	function styleDetector(style, rule) {
	  for (var prop in style) {
	    var value = style[prop];
	
	    if (value.constructor === Object) {
	      if (prop === 'fallbacks') style[prop] = styleDetector(style[prop]);else {
	        style[prop] = objectToString(value, prop, rule);
	        // Avoid creating properties with empty values
	        if (!style[prop]) delete style[prop];
	      }
	      continue;
	    }
	
	    // Check double arrays to avoid recursion.
	    if (value.constructor === Array && value[0].constructor !== Array) {
	      if (prop === 'fallbacks') {
	        for (var index = 0; index < style[prop].length; index++) {
	          style[prop][index] = styleDetector(style[prop][index]);
	        }
	        continue;
	      }
	
	      style[prop] = arrayToString(value, prop, _props.propArray);
	    }
	  }
	  return style;
	}
	
	/**
	 * Adds possibility to write expanded styles.
	 *
	 * @param {Rule} rule
	 * @api public
	 */
	function jssExpand() {
	  return function (rule) {
	    var style = rule.style;
	    var type = rule.type;
	
	    if (!style || type !== 'regular') return;
	
	    if (Array.isArray(style)) {
	      // Pass rules one by one and reformat them
	      for (var index = 0; index < style.length; index++) {
	        style[index] = styleDetector(style[index], rule);
	      }
	      return;
	    }
	
	    rule.style = styleDetector(style, rule);
	  };
	}

/***/ },
/* 1 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * A scheme for converting properties from array to regular style.
	 * All properties listed below will be transformed to a string separated by space.
	 */
	var propArray = exports.propArray = {
	  margin: true,
	  padding: true,
	  'border-radius': true,
	  'background-size': true,
	  'background-position': true,
	  'transform-origin': true
	};
	
	/**
	 * A scheme for converting arrays to regular styles inside of objects.
	 * For e.g.: "{position: [0, 0]}" => "background-position: 0 0;".
	 */
	var propArrayInObj = exports.propArrayInObj = {
	  position: true // background-position
	};
	
	/**
	 * A scheme for parsing and building correct styles from passed objects.
	 */
	var propObj = exports.propObj = {
	  padding: {
	    top: 0,
	    right: 0,
	    bottom: 0,
	    left: 0
	  },
	  margin: {
	    top: 0,
	    right: 0,
	    bottom: 0,
	    left: 0
	  },
	  background: {
	    attachment: null,
	    color: null,
	    image: null,
	    position: null,
	    repeat: null
	  },
	  border: {
	    width: null,
	    style: null,
	    color: null
	  },
	  'border-top': {
	    width: null,
	    style: null,
	    color: null
	  },
	  'border-right': {
	    width: null,
	    style: null,
	    color: null
	  },
	  'border-bottom': {
	    width: null,
	    style: null,
	    color: null
	  },
	  'border-left': {
	    width: null,
	    style: null,
	    color: null
	  },
	  outline: {
	    width: null,
	    style: null,
	    color: null
	  },
	  'list-style': {
	    type: null,
	    position: null,
	    image: null
	  },
	  transition: {
	    property: null,
	    duration: null,
	    'timing-function': null,
	    timingFunction: null, // Needed for avoiding comilation issues with jss-camel-case
	    delay: null
	  },
	  animation: {
	    name: null,
	    duration: null,
	    'timing-function': null,
	    timingFunction: null, // Needed to avoid compilation issues with jss-camel-case
	    delay: null,
	    'iteration-count': null,
	    iterationCount: null, // Needed to avoid compilation issues with jss-camel-case
	    direction: null,
	    'fill-mode': null,
	    fillMode: null, // Needed to avoid compilation issues with jss-camel-case
	    'play-state': null,
	    playState: null // Needed to avoid compilation issues with jss-camel-case
	  },
	  'box-shadow': {
	    x: 0,
	    y: 0,
	    blur: null,
	    spread: null,
	    color: null,
	    inset: null
	  },
	  'text-shadow': {
	    x: 0,
	    y: 0,
	    blur: null,
	    color: null
	  },
	  flex: {
	    grow: null,
	    shrink: null,
	    basis: null
	  }
	};
	
	/**
	 * A scheme for converting non-standart properties inside object.
	 * For e.g.: include 'border-radius' property inside 'border' object.
	 */
	var customPropObj = exports.customPropObj = {
	  border: {
	    radius: 'border-radius'
	  },
	  background: {
	    size: 'background-size'
	  },
	  font: {
	    style: 'font-style',
	    variant: 'font-variant',
	    weight: 'font-weight',
	    stretch: 'font-stretch',
	    size: 'font-size',
	    family: 'font-family',
	    lineHeight: 'line-height', // Needed to avoid compilation issues with jss-camel-case
	    'line-height': 'line-height'
	  }
	};

/***/ }
/******/ ])
});
;
//# sourceMappingURL=jss-expand.js.map