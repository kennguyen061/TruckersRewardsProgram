(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"));
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["ReactAriaTabpanel"] = factory(require("react"));
	else
		root["CoreUI"] = root["CoreUI"] || {}, root["CoreUI"]["ReactAriaTabpanel"] = factory(root["React"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_3__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _reactAriaTabpanel = __webpack_require__(1);

	var _reactAriaTabpanel2 = _interopRequireDefault(_reactAriaTabpanel);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _reactAriaTabpanel2.default;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  Tab: __webpack_require__(2),
	  TabList: __webpack_require__(5),
	  TabPanel: __webpack_require__(6),
	  Wrapper: __webpack_require__(7),
	};


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(3);
	var specialAssign = __webpack_require__(4);

	var checkedProps = {
	  children: React.PropTypes.oneOfType([
	    React.PropTypes.node,
	    React.PropTypes.func,
	  ]).isRequired,
	  id: React.PropTypes.string.isRequired,
	  tag: React.PropTypes.string,
	  index: React.PropTypes.number,
	  active: React.PropTypes.bool,
	  letterNavigationText: React.PropTypes.string,
	};

	module.exports = React.createClass({
	  displayName: 'AriaTabPanel-Tab',

	  propTypes: checkedProps,

	  getDefaultProps: function() {
	    return { tag: 'div' };
	  },

	  contextTypes: {
	    atpManager: React.PropTypes.object.isRequired,
	  },

	  getInitialState: function() {
	    return {
	      isActive: this.context.atpManager.memberStartsActive(this.props.id) || false,
	    };
	  },

	  handleFocus: function() {
	    this.context.atpManager.handleTabFocus(this.props.id);
	  },

	  updateActiveState: function(nextActiveState) {
	    this.setState({ isActive: nextActiveState });
	  },

	  registerWithManager: function(el) {
	    if (this.isRegistered) return;
	    this.isRegistered = true;
	    this.context.atpManager.registerTab({
	      id: this.props.id,
	      node: el,
	      update: this.updateActiveState,
	      index: this.props.index,
	      letterNavigationText: this.props.letterNavigationText,
	    });
	  },

	  render: function() {
	    var props = this.props;
	    var isActive = (props.active === undefined) ? this.state.isActive : props.active;

	    var kids = (function() {
	      if (typeof props.children === 'function') {
	        return props.children({ isActive: isActive });
	      }
	      return props.children;
	    }());

	    var elProps = {
	      id: props.id,
	      tabIndex: (isActive) ? 0 : -1,
	      onClick: this.handleClick,
	      onFocus: this.handleFocus,
	      role: 'tab',
	      'aria-selected': isActive,
	      'aria-controls': this.context.atpManager.getTabPanelId(props.id),
	      ref: this.registerWithManager,
	    };
	    specialAssign(elProps, props, checkedProps);

	    return React.createElement(props.tag, elProps, kids);
	  },
	});


/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_3__;

/***/ },
/* 4 */
/***/ function(module, exports) {

	// Assign to `a` all properties in `b` that are not in `reserved`
	// or already in `a`
	module.exports = function(a, b, reserved) {
	  for (var x in b) {
	    if (!b.hasOwnProperty(x)) continue;
	    if (a[x]) continue;
	    if (reserved[x]) continue;
	    a[x] = b[x];
	  }
	}


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(3);
	var specialAssign = __webpack_require__(4);

	var checkedProps = {
	  children: React.PropTypes.node.isRequired,
	  tag: React.PropTypes.string,
	};

	module.exports = React.createClass({
	  displayName: 'AriaTabPanel-TabList',

	  propTypes: checkedProps,

	  getDefaultProps: function() {
	    return { tag: 'div' };
	  },

	  render: function() {
	    var props = this.props;
	    var elProps = {
	      role: 'tablist',
	    };
	    specialAssign(elProps, props, checkedProps);
	    return React.createElement(props.tag, elProps, props.children);
	  },
	});


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(3);
	var specialAssign = __webpack_require__(4);

	var checkedProps = {
	  children: React.PropTypes.oneOfType([
	    React.PropTypes.node,
	    React.PropTypes.func,
	  ]).isRequired,
	  tabId: React.PropTypes.string.isRequired,
	  tag: React.PropTypes.string,
	  active: React.PropTypes.bool,
	};

	module.exports = React.createClass({
	  displayName: 'AriaTabPanel-TabPanel',

	  propTypes: checkedProps,

	  getDefaultProps: function() {
	    return { tag: 'div' };
	  },

	  contextTypes: {
	    atpManager: React.PropTypes.object.isRequired,
	  },

	  getInitialState: function() {
	    return {
	      isActive: this.context.atpManager.memberStartsActive(this.props.tabId) || false,
	    };
	  },

	  handleKeyDown: function(event) {
	    if (event.ctrlKey && event.key === 'ArrowUp') {
	      event.preventDefault();
	      this.context.atpManager.focusTab(this.props.tabId);
	    }
	  },

	  updateActiveState: function(nextActiveState) {
	    this.setState({ isActive: nextActiveState });
	  },

	  registerWithManager: function(el) {
	    if (this.isRegistered) return;
	    this.isRegistered = true;
	    this.context.atpManager.registerTabPanel({
	      node: el,
	      update: this.updateActiveState,
	      tabId: this.props.tabId,
	    });
	  },

	  render: function() {
	    var props = this.props;
	    var isActive = (props.active === undefined) ? this.state.isActive || false : props.active;

	    var kids = (typeof props.children === 'function')
	      ? props.children({ isActive: isActive })
	      : props.children;

	    var style = props.style || {};
	    if (!isActive) {
	      style.display = 'none';
	    }

	    var elProps = {
	      className: props.className,
	      id: this.context.atpManager.getTabPanelId(props.tabId),
	      onKeyDown: this.handleKeyDown,
	      role: 'tabpanel',
	      style: style,
	      'aria-hidden': !isActive,
	      'aria-describedby': props.tabId,
	      ref: this.registerWithManager,
	    };
	    specialAssign(elProps, props, checkedProps);

	    return React.createElement(props.tag, elProps, kids);
	  },
	});


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(3);
	var createManager = __webpack_require__(8);
	var specialAssign = __webpack_require__(4);

	var checkedProps = {
	  children: React.PropTypes.node.isRequired,
	  activeTabId: React.PropTypes.string,
	  letterNavigation: React.PropTypes.bool,
	  onChange: React.PropTypes.func,
	  tag: React.PropTypes.string,
	};

	module.exports = React.createClass({
	  displayName: 'AriaTabPanel-Wrapper',

	  propTypes: checkedProps,

	  getDefaultProps: function() {
	    return { tag: 'div' };
	  },

	  childContextTypes: {
	    atpManager: React.PropTypes.object.isRequired,
	  },

	  getChildContext: function() {
	    return { atpManager: this.manager };
	  },

	  componentWillMount: function() {
	    this.manager = createManager({
	      onChange: this.props.onChange,
	      activeTabId: this.props.activeTabId,
	      letterNavigation: this.props.letterNavigation,
	    });
	  },

	  componentWillUnmount: function() {
	    this.manager.destroy();
	  },

	  componentDidMount: function() {
	    this.manager.activate();
	  },

	  render: function() {
	    var props = this.props;
	    var elProps = {};
	    specialAssign(elProps, props, checkedProps);
	    return React.createElement(props.tag, elProps, props.children);
	  },
	});


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var createFocusGroup = __webpack_require__(9);

	function Manager(options) {
	  this.options = options;

	  var focusGroupOptions = {
	    wrap: true,
	    forwardArrows: ['down', 'right'],
	    backArrows: ['up', 'left'],
	    stringSearch: options.letterNavigation,
	  };

	  this.focusGroup = createFocusGroup(focusGroupOptions);

	  // These component references are added when the relevant components mount
	  this.tabs = [];
	  this.tabPanels = [];

	  this.activeTabId = options.activeTabId;
	}

	Manager.prototype.activate = function() {
	  this.focusGroup.activate();
	};

	Manager.prototype.memberStartsActive = function(tabId) {
	  if (this.activeTabId === tabId) {
	    return true;
	  }

	  if (this.activeTabId === undefined) {
	    this.activeTabId = tabId;
	    return true;
	  }

	  return false;
	};

	Manager.prototype.registerTab = function(tabMember) {
	  if (tabMember.index === undefined) {
	    this.tabs.push(tabMember);
	  } else {
	    this.tabs.splice(tabMember.index, 0, tabMember);
	  }

	  var focusGroupMember = (tabMember.letterNavigationText) ? {
	    node: tabMember.node,
	    text: tabMember.letterNavigationText,
	  } : tabMember.node;

	  this.focusGroup.addMember(focusGroupMember, tabMember.index);

	  this.activateTab(this.activeTabId || tabMember.id);
	};

	Manager.prototype.registerTabPanel = function(tabPanelMember) {
	  this.tabPanels.push(tabPanelMember);
	  this.activateTab(this.activeTabId);

	  this.activateTab(this.activeTabId || tabPanelMember.tabId);
	};

	Manager.prototype.activateTab = function(nextActiveTabId) {
	  if (nextActiveTabId === this.activeTabId) return;
	  this.activeTabId = nextActiveTabId;

	  if (this.options.onChange) {
	    this.options.onChange(nextActiveTabId);
	    return;
	  }

	  this.tabPanels.forEach(function(tabPanelMember) {
	    tabPanelMember.update(nextActiveTabId === tabPanelMember.tabId);
	  });
	  this.tabs.forEach(function(tabMember) {
	    tabMember.update(nextActiveTabId === tabMember.id);
	  });
	}

	Manager.prototype.handleTabFocus = function(focusedTabId) {
	  this.activateTab(focusedTabId);
	};

	Manager.prototype.focusTab = function(tabId) {
	  var tabMemberToFocus = this.tabs.find(function(tabMember) {
	    return tabMember.id === tabId;
	  });
	  if (!tabMemberToFocus) return;
	  tabMemberToFocus.node.focus();
	};

	Manager.prototype.destroy = function() {
	  this.focusGroup.deactivate();
	};

	Manager.prototype.getTabPanelId = function(tabId) {
	  return tabId + '-panel';
	};

	module.exports = function(options) {
	  return new Manager(options);
	};


/***/ },
/* 9 */
/***/ function(module, exports) {

	function FocusGroup(options) {
	  options = options || {};
	  this._settings = {
	    forwardArrows: options.forwardArrows || ['down'],
	    backArrows: options.backArrows || ['up'],
	    wrap: options.wrap,
	    stringSearch: options.stringSearch,
	    stringSearchDelay: 800,
	  };
	  this._searchString = '';
	  this._members = [];
	  if (options.members) this.setMembers(options.members);
	  this._boundHandleKeydownEvent = this._handleKeydownEvent.bind(this);
	}

	FocusGroup.prototype.activate = function() {
	  // Use capture in case other libraries might grab it first -- i.e. React
	  document.addEventListener('keydown', this._boundHandleKeydownEvent, true);
	  return this;
	};

	FocusGroup.prototype.deactivate = function() {
	  document.removeEventListener('keydown', this._boundHandleKeydownEvent, true);
	  this._clearSearchStringRefreshTimer();
	  return this;
	};

	FocusGroup.prototype._handleKeydownEvent = function(event) {
	  // Only respond to keyboard events when
	  // focus is already within the focus-group
	  var activeElementIndex = this._getActiveElementIndex();
	  if (activeElementIndex === -1) return;

	  var arrow = getEventArrowKey(event);

	  if (!arrow) {
	    this._handleNonArrowKey(event);
	    return;
	  }

	  if (this._settings.forwardArrows.indexOf(arrow) !== -1) {
	    event.preventDefault();
	    this.moveFocusForward();
	    return;
	  }

	  if (this._settings.backArrows.indexOf(arrow) !== -1) {
	    event.preventDefault();
	    this.moveFocusBack();
	    return;
	  }
	};

	FocusGroup.prototype.moveFocusForward = function() {
	  var activeElementIndex = this._getActiveElementIndex();
	  var targetIndex;
	  if (activeElementIndex < this._members.length - 1) {
	    targetIndex = activeElementIndex + 1;
	  } else if (this._settings.wrap) {
	    targetIndex = 0;
	  } else {
	    targetIndex = activeElementIndex;
	  }
	  this.focusNodeAtIndex(targetIndex);
	  return targetIndex;
	};

	FocusGroup.prototype.moveFocusBack = function() {
	  var activeElementIndex = this._getActiveElementIndex();
	  var targetIndex;
	  if (activeElementIndex > 0) {
	    targetIndex = activeElementIndex - 1;
	  } else if (this._settings.wrap) {
	    targetIndex = this._members.length - 1;
	  } else {
	    targetIndex = activeElementIndex;
	  }
	  this.focusNodeAtIndex(targetIndex);
	  return targetIndex;
	};

	FocusGroup.prototype._handleNonArrowKey = function(event) {
	  if (!this._settings.stringSearch) return;

	  // While a string search is underway, ignore spaces
	  // and prevent the default space-key behavior
	  if (this._searchString !== '' && (event.key === ' ' || event.keyCode === 32)) {
	    event.preventDefault();
	    return -1;
	  }

	  // Only respond to letter keys
	  if (!isLetterKeyCode(event.keyCode)) return -1;

	  // If the letter key is part of a key combo,
	  // let it do whatever it was going to do
	  if (event.ctrlKey || event.metaKey || event.altKey) return -1;

	  event.preventDefault();

	  this._addToSearchString(String.fromCharCode(event.keyCode));
	  this._runStringSearch();
	};

	FocusGroup.prototype._clearSearchString = function() {
	  this._searchString = '';
	};

	FocusGroup.prototype._addToSearchString = function(letter) {
	  // Always store the lowercase version of the letter
	  this._searchString += letter.toLowerCase();
	};

	FocusGroup.prototype._startSearchStringRefreshTimer = function() {
	  var self = this;
	  this._clearSearchStringRefreshTimer();
	  this._stringSearchTimer = setTimeout(function() {
	    self._clearSearchString();
	  }, this._settings.stringSearchDelay);
	};

	FocusGroup.prototype._clearSearchStringRefreshTimer = function() {
	  clearTimeout(this._stringSearchTimer);
	}

	FocusGroup.prototype._runStringSearch = function() {
	  this._startSearchStringRefreshTimer();
	  this.moveFocusByString(this._searchString);
	}

	FocusGroup.prototype.moveFocusByString = function(str) {
	  var member;
	  for (var i = 0, l = this._members.length; i < l; i++) {
	    member = this._members[i];
	    if (!member.text) continue;

	    if (member.text.indexOf(str) === 0) {
	      return focusNode(member.node);
	    }
	  }
	}

	FocusGroup.prototype._findIndexOfNode = function(searchNode) {
	  for (var i = 0, l = this._members.length; i < l; i++) {
	    if (this._members[i].node === searchNode) {
	      return i;
	    }
	  }
	  return -1;
	}

	FocusGroup.prototype._getActiveElementIndex = function() {
	  return this._findIndexOfNode(document.activeElement);
	};

	FocusGroup.prototype.focusNodeAtIndex = function(index) {
	  var member = this._members[index];
	  if (member) focusNode(member.node);
	  return this;
	};

	FocusGroup.prototype.addMember = function(member, index) {
	  var node = member.node || member;
	  var nodeText = member.text || node.getAttribute('data-focus-group-text') || node.textContent || '';

	  this._checkNode(node);

	  var cleanedNodeText = nodeText.replace(/[\W_]/g, '').toLowerCase();
	  var member = {
	    node: node,
	    text: cleanedNodeText,
	  };

	  if (index !== null && index !== undefined) {
	    this._members.splice(index, 0, member);
	  } else {
	    this._members.push(member);
	  }
	  return this;
	};

	FocusGroup.prototype.removeMember = function(member) {
	  var removalIndex = (typeof member === 'number')
	    ? member
	    : this._findIndexOfNode(member);
	  if (removalIndex === -1) return;
	  this._members.splice(removalIndex, 1);
	  return this;
	};

	FocusGroup.prototype.clearMembers = function() {
	  this._members = [];
	  return this;
	};

	FocusGroup.prototype.setMembers = function(nextMembers) {
	  this.clearMembers();
	  for (var i = 0, l = nextMembers.length; i < l; i++) {
	    this.addMember(nextMembers[i]);
	  }
	  return this;
	};

	FocusGroup.prototype.getMembers = function() {
	  return this._members;
	};

	FocusGroup.prototype._checkNode = function(node) {
	  if (!node.nodeType || node.nodeType !== window.Node.ELEMENT_NODE) {
	    throw new Error('focus-group: only DOM nodes allowed');
	  }
	  return node;
	};

	function getEventArrowKey(event) {
	  if (event.key === 'ArrowUp' || event.keyCode === 38) return 'up';
	  if (event.key === 'ArrowDown' || event.keyCode === 40) return 'down';
	  if (event.key === 'ArrowLeft' || event.keyCode === 37) return 'left';
	  if (event.key === 'ArrowRight' || event.keyCode === 39) return 'right';
	  return null;
	}

	function isLetterKeyCode(keyCode) {
	  return keyCode >= 65 && keyCode <= 90;
	}

	function focusNode(node) {
	  if (!node || !node.focus) return;
	  node.focus();
	  if (node.tagName.toLowerCase() === 'input') node.select();
	}

	module.exports = function createFocusGroup(options) {
	  return new FocusGroup(options);
	};


/***/ }
/******/ ])
});
;