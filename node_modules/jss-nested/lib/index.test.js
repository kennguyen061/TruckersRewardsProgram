'use strict';

var _expect = require('expect.js');

var _expect2 = _interopRequireDefault(_expect);

var _ = require('./');

var _2 = _interopRequireDefault(_);

var _jssExtend = require('jss-extend');

var _jssExtend2 = _interopRequireDefault(_jssExtend);

var _jss = require('jss');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-underscore-dangle */

describe('jss-nested', function () {
  var jss = void 0;
  var warning = void 0;

  beforeEach(function () {
    _2.default.__Rewire__('warning', function (condition, message) {
      warning = message;
    });
    jss = (0, _jss.create)().use((0, _2.default)());
  });

  afterEach(function () {
    _2.default.__ResetDependency__('warning');
    warning = undefined;
  });

  describe('nesting with space', function () {
    var sheet = void 0;

    beforeEach(function () {
      sheet = jss.createStyleSheet({
        a: {
          float: 'left',
          '& b': { float: 'left' }
        }
      }, { named: false });
    });

    it('should add rules', function () {
      (0, _expect2.default)(sheet.getRule('a')).to.not.be(undefined);
      (0, _expect2.default)(sheet.getRule('a b')).to.not.be(undefined);
    });

    it('should generate correct CSS', function () {
      (0, _expect2.default)(sheet.toString()).to.be('a {\n' + '  float: left;\n' + '}\n' + 'a b {\n' + '  float: left;\n' + '}');
    });
  });

  describe('nesting without space', function () {
    var sheet = void 0;

    beforeEach(function () {
      sheet = jss.createStyleSheet({
        a: {
          float: 'left',
          '&b': { float: 'left' }
        }
      }, { named: false });
    });

    it('should add rules', function () {
      (0, _expect2.default)(sheet.getRule('a')).to.not.be(undefined);
      (0, _expect2.default)(sheet.getRule('ab')).to.not.be(undefined);
    });

    it('should generate correct CSS', function () {
      (0, _expect2.default)(sheet.toString()).to.be('a {\n' + '  float: left;\n' + '}\n' + 'ab {\n' + '  float: left;\n' + '}');
    });
  });

  describe('multi nesting', function () {
    var sheet = void 0;

    beforeEach(function () {
      sheet = jss.createStyleSheet({
        a: {
          float: 'left',
          '&b': { float: 'left' },
          '& c': { float: 'left' }
        }
      }, { named: false });
    });

    it('should add rules', function () {
      (0, _expect2.default)(sheet.getRule('a')).to.not.be(undefined);
      (0, _expect2.default)(sheet.getRule('ab')).to.not.be(undefined);
      (0, _expect2.default)(sheet.getRule('a c')).to.not.be(undefined);
    });

    it('should generate correct CSS', function () {
      (0, _expect2.default)(sheet.toString()).to.be('a {\n' + '  float: left;\n' + '}\n' + 'ab {\n' + '  float: left;\n' + '}\n' + 'a c {\n' + '  float: left;\n' + '}');
    });
  });

  describe('multi nesting in one selector', function () {
    var sheet = void 0;

    beforeEach(function () {
      sheet = jss.createStyleSheet({
        a: {
          float: 'left',
          '&b, &c': { float: 'left' }
        }
      }, { named: false });
    });

    it('should add rules', function () {
      (0, _expect2.default)(sheet.getRule('a')).to.not.be(undefined);
      (0, _expect2.default)(sheet.getRule('ab, ac')).to.not.be(undefined);
    });

    it('should generate correct CSS', function () {
      (0, _expect2.default)(sheet.toString()).to.be('a {\n' + '  float: left;\n' + '}\n' + 'ab, ac {\n' + '  float: left;\n' + '}');
    });
  });

  describe('.addRules()', function () {
    var sheet = void 0;

    beforeEach(function () {
      sheet = jss.createStyleSheet({
        a: {
          height: '1px'
        }
      }, { named: false });

      sheet.addRules({
        b: {
          height: '2px',
          '& c': {
            height: '3px'
          }
        }
      });
    });

    it('should generate correct CSS', function () {
      (0, _expect2.default)(sheet.toString()).to.be('a {\n' + '  height: 1px;\n' + '}\n' + 'b {\n' + '  height: 2px;\n' + '}\n' + 'b c {\n' + '  height: 3px;\n' + '}');
    });
  });

  describe('nesting in a namespaced rule', function () {
    var sheet = void 0;

    beforeEach(function () {
      sheet = jss.createStyleSheet({
        a: {
          float: 'left',
          '& b': { float: 'left' }
        },
        c: {
          float: 'left'
        }
      });
    });

    it('should add rules', function () {
      (0, _expect2.default)(sheet.getRule('a')).to.not.be(undefined);
      (0, _expect2.default)(sheet.getRule('.a-3182562902 b')).to.not.be(undefined);
      (0, _expect2.default)(sheet.getRule('c')).to.not.be(undefined);
    });

    it('should generate correct CSS', function () {
      (0, _expect2.default)(sheet.toString()).to.be('.a-3182562902 {\n' + '  float: left;\n' + '}\n' + '.a-3182562902 b {\n' + '  float: left;\n' + '}\n' + '.c-3787690649 {\n' + '  float: left;\n' + '}');
    });
  });

  describe('nesting in a conditional namespaced rule', function () {
    var sheet = void 0;

    beforeEach(function () {
      sheet = jss.createStyleSheet({
        a: {
          color: 'green'
        },
        '@media': {
          a: {
            '&:hover': { color: 'red' }
          }
        }
      });
    });

    it('should add rules', function () {
      (0, _expect2.default)(sheet.getRule('a')).to.not.be(undefined);
      (0, _expect2.default)(sheet.getRule('@media')).to.not.be(undefined);
    });

    it('should generate correct CSS', function () {
      (0, _expect2.default)(sheet.toString()).to.be('.a-460900105 {\n' + '  color: green;\n' + '}\n' + '@media {\n' + '  .a-460900105:hover {\n' + '    color: red;\n' + '  }\n' + '}');
    });
  });

  describe('nesting a conditional rule inside a regular rule', function () {
    var sheet = void 0;

    beforeEach(function () {
      sheet = jss.createStyleSheet({
        a: {
          color: 'green',
          '@media': {
            width: '200px'
          }
        },
        b: {
          color: 'red'
        }
      });
    });

    it('should add rules', function () {
      (0, _expect2.default)(sheet.getRule('a')).to.not.be(undefined);
      (0, _expect2.default)(sheet.getRule('@media')).to.not.be(undefined);
      (0, _expect2.default)(sheet.getRule('b')).to.not.be(undefined);
    });

    it('should generate correct CSS', function () {
      (0, _expect2.default)(sheet.toString()).to.be('.a-3036715211 {\n' + '  color: green;\n' + '}\n' + '.b-3645560457 {\n' + '  color: red;\n' + '}\n' + '@media {\n' + '  .a-3036715211 {\n' + '    width: 200px;\n' + '  }\n' + '}');
    });
  });

  describe('adding a rule with a conditional rule', function () {
    var sheet = void 0;

    beforeEach(function () {
      sheet = jss.createStyleSheet();
      sheet.addRule('a', {
        color: 'green',
        '@media': {
          width: '200px'
        }
      });
    });

    it('should add rules', function () {
      (0, _expect2.default)(sheet.getRule('a')).to.not.be(undefined);
      (0, _expect2.default)(sheet.getRule('@media')).to.not.be(undefined);
    });

    it('should generate correct CSS', function () {
      (0, _expect2.default)(sheet.toString()).to.be('.a-3036715211 {\n' + '  color: green;\n' + '}\n' + '@media {\n' + '  .a-3036715211 {\n' + '    width: 200px;\n' + '  }\n' + '}');
    });
  });

  describe('merge nested conditional to container conditional with existing rule', function () {
    var sheet = void 0;

    beforeEach(function () {
      sheet = jss.createStyleSheet({
        a: {
          color: 'green',
          '@media': {
            width: '200px'
          }
        },
        '@media': {
          b: {
            color: 'blue'
          }
        },
        c: {
          color: 'red'
        }
      });
    });

    it('should add rules', function () {
      (0, _expect2.default)(sheet.getRule('a')).to.not.be(undefined);
      (0, _expect2.default)(sheet.getRule('@media')).to.not.be(undefined);
      (0, _expect2.default)(sheet.getRule('c')).to.not.be(undefined);
    });

    it('should generate correct CSS', function () {
      (0, _expect2.default)(sheet.toString()).to.be('.a-3036715211 {\n' + '  color: green;\n' + '}\n' + '@media {\n' + '  .b-1243194637 {\n' + '    color: blue;\n' + '  }\n' + '  .a-3036715211 {\n' + '    width: 200px;\n' + '  }\n' + '}\n' + '.c-3645560457 {\n' + '  color: red;\n' + '}');
    });
  });

  describe('warnings', function () {
    it('should warn when referenced rule is not found', function () {
      jss.createStyleSheet({
        a: {
          '& $b': { float: 'left' }
        }
      });

      (0, _expect2.default)(warning).to.be('[JSS] Could not find the referenced rule %s. \r\n%s');
    });
  });

  describe('local refs', function () {
    var sheet = void 0;

    beforeEach(function () {
      sheet = jss.createStyleSheet({
        a: {
          float: 'left',
          '& $b': { float: 'left' },
          '& $b-warn': { float: 'right' }
        },
        b: {
          color: 'red'
        },
        'b-warn': {
          color: 'orange'
        }
      });
    });

    it('should generate correct CSS', function () {
      (0, _expect2.default)(sheet.toString()).to.be('.a-1261267506 {\n' + '  float: left;\n' + '}\n' + '.a-1261267506 .b-3645560457 {\n' + '  float: left;\n' + '}\n' + '.a-1261267506 .b-warn-1549041947 {\n' + '  float: right;\n' + '}\n' + '.b-3645560457 {\n' + '  color: red;\n' + '}\n' + '.b-warn-1549041947 {\n' + '  color: orange;\n' + '}');
    });
  });

  describe('nesting conditionals in combination with extend plugin', function () {
    var sheet = void 0;

    beforeEach(function () {
      var localJss = (0, _jss.create)().use((0, _jssExtend2.default)(), (0, _2.default)());
      sheet = localJss.createStyleSheet({
        button: {
          color: 'green',
          'background-color': 'aqua',
          '@media': {
            width: '200px'
          }
        },
        redButton: {
          extend: 'button',
          color: 'red'
        }
      });
    });

    it('should add rules', function () {
      (0, _expect2.default)(sheet.getRule('button')).to.not.be(undefined);
      (0, _expect2.default)(sheet.getRule('@media')).to.not.be(undefined);
      (0, _expect2.default)(sheet.getRule('redButton')).to.not.be(undefined);
    });

    it('should generate correct CSS', function () {
      (0, _expect2.default)(sheet.toString()).to.be('.button-148595348 {\n' + '  color: green;\n' + '  background-color: aqua;\n' + '}\n' + '.redButton-4175883671 {\n' + '  color: red;\n' + '  background-color: aqua;\n' + '}\n' + '@media {\n' + '  .button-148595348 {\n' + '    width: 200px;\n' + '  }\n' + '  .redButton-4175883671 {\n' + '    width: 200px;\n' + '  }\n' + '}');
    });
  });

  describe('deep nesting', function () {
    var sheet = void 0;

    beforeEach(function () {
      var localJss = (0, _jss.create)().use((0, _jssExtend2.default)(), (0, _2.default)());
      sheet = localJss.createStyleSheet({
        button: {
          color: 'black',
          '& .a': {
            color: 'red',
            '& .c': {
              color: 'gold'
            }
          }
        }
      });
    });

    it('should add rules', function () {
      (0, _expect2.default)(sheet.getRule('button')).to.not.be(undefined);
      (0, _expect2.default)(sheet.getRule('.button-3439974623 .a')).to.not.be(undefined);
      (0, _expect2.default)(sheet.getRule('.button-3439974623 .a .c')).to.not.be(undefined);
    });

    it('should generate correct CSS', function () {
      (0, _expect2.default)(sheet.toString()).to.be('.button-3439974623 {\n' + '  color: black;\n' + '}\n' + '.button-3439974623 .a {\n' + '  color: red;\n' + '}\n' + '.button-3439974623 .a .c {\n' + '  color: gold;\n' + '}');
    });
  });

  describe('deep nesting with multiple nestings in one selector', function () {
    var sheet = void 0;

    beforeEach(function () {
      sheet = jss.createStyleSheet({
        button: {
          color: 'black',
          '& .a, .b': {
            color: 'red',
            '& .c, &:hover': {
              color: 'gold'
            }
          }
        }
      });
    });

    it('should add rules', function () {
      (0, _expect2.default)(sheet.getRule('button')).to.not.be(undefined);
      (0, _expect2.default)(sheet.getRule('.button-1766210468 .a, .button-1766210468 .b')).to.not.be(undefined);
      (0, _expect2.default)(sheet.getRule('.button-1766210468 .a .c, .button-1766210468 .a:hover, ' + '.button-1766210468 .b .c, .button-1766210468 .b:hover')).to.not.be(undefined);
    });

    it('should generate correct CSS', function () {
      (0, _expect2.default)(sheet.toString()).to.be('.button-1766210468 {\n' + '  color: black;\n' + '}\n' + '.button-1766210468 .a, .button-1766210468 .b {\n' + '  color: red;\n' + '}\n' + '.button-1766210468 .a .c, .button-1766210468 .a:hover, ' + '.button-1766210468 .b .c, .button-1766210468 .b:hover {\n' + '  color: gold;\n' + '}');
    });
  });

  describe('support & at any position', function () {
    var sheet = void 0;

    beforeEach(function () {
      sheet = jss.createStyleSheet({
        a: {
          'input:focus + &': {
            color: 'red'
          }
        }
      });
    });

    it('should generate correct CSS', function () {
      (0, _expect2.default)(sheet.toString()).to.be('input:focus + .a-1380569186 {\n' + '  color: red;\n' + '}');
    });
  });
});