'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = jssNested;

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var separatorRegExp = /\s*,\s*/g;
var parentRegExp = /&/g;
var refRegExp = /\$([\w-]+)/g;

/**
 * Convert nested rules to separate, remove them from original styles.
 *
 * @param {Rule} rule
 * @api public
 */
function jssNested() {
  // Get a function to be used for $ref replacement.
  function getReplaceRef(container) {
    return function (match, name) {
      var rule = container.getRule(name);
      if (rule) return rule.selector;
      (0, _warning2.default)(false, '[JSS] Could not find the referenced rule %s. \r\n%s', name, rule);
      return name;
    };
  }

  function addConditional(name, rule, container) {
    var conditionalContainer = container.getRule(name);

    if (!conditionalContainer) {
      // Add conditional to container because it does not exist yet.
      container.addRule(name, _defineProperty({}, rule.name, rule.style[name]));
      return;
    }

    // It exists, so now check if we have already defined styles
    // for example @media print { .some-style { display: none; } } .
    var ruleToExtend = conditionalContainer.getRule(rule.name);

    if (ruleToExtend) {
      ruleToExtend.style = _extends({}, ruleToExtend.style, rule.style[name]);
      return;
    }

    // Conditional rule in container has no rule so create it.
    conditionalContainer.addRule(rule.name, rule.style[name]);
  }

  var hasAnd = function hasAnd(str) {
    return str.indexOf('&') !== -1;
  };

  function replaceParentRefs(nestedProp, parentProp) {
    var parentSelectors = parentProp.split(separatorRegExp);
    var nestedSelectors = nestedProp.split(separatorRegExp);

    var result = '';

    for (var i = 0; i < parentSelectors.length; i++) {
      var parent = parentSelectors[i];

      for (var j = 0; j < nestedSelectors.length; j++) {
        var nested = nestedSelectors[j];
        if (result) result += ', ';
        // Replace all & by the parent or prefix & with the parent.
        result += hasAnd(nested) ? nested.replace(parentRegExp, parent) : parent + ' ' + nested;
      }
    }

    return result;
  }

  function getOptions(rule, container, options) {
    // Options has been already created, now we only increase index.
    if (options) return _extends({}, options, { index: options.index + 1 });

    var nestingLevel = rule.options.nestingLevel;

    nestingLevel = nestingLevel === undefined ? 1 : nestingLevel + 1;

    return _extends({}, rule.options, {
      named: false,
      nestingLevel: nestingLevel,
      index: container.indexOf(rule) + 1
    });
  }

  return function (rule) {
    if (rule.type !== 'regular') return;
    var container = rule.options.parent;
    var options = void 0;
    var replaceRef = void 0;

    for (var prop in rule.style) {
      var isNested = hasAnd(prop);
      var isNestedConditional = prop[0] === '@';

      if (!isNested && !isNestedConditional) continue;

      if (isNested) {
        options = getOptions(rule, container, options);

        var selector = replaceParentRefs(prop, rule.selector);
        // Lazily create the ref replacer function just once for
        // all nested rules within the sheet.
        if (!replaceRef) replaceRef = getReplaceRef(container);
        // Replace all $refs.
        selector = selector.replace(refRegExp, replaceRef);

        container.addRule(selector, rule.style[prop], options);
      } else if (isNestedConditional) {
        addConditional(prop, rule, container);
      }

      delete rule.style[prop];
    }
  };
}