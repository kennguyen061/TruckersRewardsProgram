'use strict';

var _expect = require('expect.js');

var _expect2 = _interopRequireDefault(_expect);

var _jss = require('jss');

var _ = require('./');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('jss-compose', function () {
  var jss = void 0;
  var warning = void 0;

  beforeEach(function () {
    _2.default.__Rewire__('warning', function (condition, message) {
      warning = message;
    });
    jss = (0, _jss.create)().use((0, _2.default)());
  });

  afterEach(function () {
    _2.default.__ResetDependency__('warning');
    warning = undefined;
  });

  describe('Unnamed rules', function () {
    var sheet = void 0;

    beforeEach(function () {
      sheet = jss.createStyleSheet({
        a: {
          float: 'left'
        },
        b: {
          composes: 'a',
          color: 'red'
        }
      }, { named: false });
    });

    afterEach(function () {
      (0, _expect2.default)(warning).to.be(undefined);
    });

    it('should add rules', function () {
      (0, _expect2.default)(sheet.getRule('a')).to.not.be(undefined);
      (0, _expect2.default)(sheet.getRule('b')).to.not.be(undefined);
    });

    it('shouldn\'nt compose classes', function () {
      (0, _expect2.default)(sheet.getRule('b').className).to.be('');
    });

    it('should generate correct CSS', function () {
      (0, _expect2.default)(sheet.toString()).to.be('a {\n' + '  float: left;\n' + '}\n' + 'b {\n' + '  color: red;\n' + '}');
    });
  });

  describe('Named composition', function () {
    var sheet = void 0;

    beforeEach(function () {
      sheet = jss.createStyleSheet({
        a: {
          float: 'left'
        },
        b: {
          composes: '$a',
          color: 'red'
        }
      });
    });

    afterEach(function () {
      (0, _expect2.default)(warning).to.be(undefined);
    });

    it('should add rules', function () {
      (0, _expect2.default)(sheet.getRule('a')).to.not.be(undefined);
      (0, _expect2.default)(sheet.getRule('b')).to.not.be(undefined);
    });

    it('should compose classes', function () {
      (0, _expect2.default)(sheet.getRule('b').className).to.be('b-3538039808 a-3787690649');
    });

    it('should generate correct CSS', function () {
      (0, _expect2.default)(sheet.toString()).to.be('.a-3787690649 {\n' + '  float: left;\n' + '}\n' + '.b-3538039808 {\n' + '  color: red;\n' + '}');
    });
  });

  describe('Named selector composed with an unnamed one', function () {
    var sheet = void 0;

    beforeEach(function () {
      sheet = jss.createStyleSheet({
        a: {
          composes: 'b',
          color: 'red'
        }
      });
    });

    afterEach(function () {
      (0, _expect2.default)(warning).to.be(undefined);
    });

    it('should add rule', function () {
      (0, _expect2.default)(sheet.getRule('a')).to.not.be(undefined);
    });

    it('should compose classes', function () {
      (0, _expect2.default)(sheet.getRule('a').className).to.be('a-4193320358 b');
    });

    it('should generate correct CSS', function () {
      (0, _expect2.default)(sheet.toString()).to.be('.a-4193320358 {\n' + '  color: red;\n' + '}');
    });
  });

  describe('Array of named classes composition', function () {
    var sheet = void 0;

    beforeEach(function () {
      sheet = jss.createStyleSheet({
        a: {
          float: 'left'
        },
        b: {
          color: 'red'
        },
        c: {
          background: 'blue'
        },
        d: {
          composes: ['$a', '$b', '$c'],
          border: 'none'
        }
      });
    });

    afterEach(function () {
      (0, _expect2.default)(warning).to.be(undefined);
    });

    it('should add rules', function () {
      (0, _expect2.default)(sheet.getRule('a')).to.not.be(undefined);
      (0, _expect2.default)(sheet.getRule('b')).to.not.be(undefined);
      (0, _expect2.default)(sheet.getRule('c')).to.not.be(undefined);
      (0, _expect2.default)(sheet.getRule('d')).to.not.be(undefined);
    });

    it('should compose classes', function () {
      (0, _expect2.default)(sheet.getRule('d').className).to.be('d-452344379 a-3787690649 b-3645560457 c-3525728718');
    });

    it('should generate correct CSS', function () {
      (0, _expect2.default)(sheet.toString()).to.be('.a-3787690649 {\n' + '  float: left;\n' + '}\n' + '.b-3645560457 {\n' + '  color: red;\n' + '}\n' + '.c-3525728718 {\n' + '  background: blue;\n' + '}\n' + '.d-452344379 {\n' + '  border: none;\n' + '}');
    });
  });

  describe('Mixed composition (named and unnamed classes)', function () {
    var sheet = void 0;

    beforeEach(function () {
      sheet = jss.createStyleSheet({
        a: {
          float: 'left'
        },
        b: {
          composes: ['$a', 'c', 'd'],
          color: 'red'
        }
      });
    });

    afterEach(function () {
      (0, _expect2.default)(warning).to.be(undefined);
    });

    it('should add rules', function () {
      (0, _expect2.default)(sheet.getRule('a')).to.not.be(undefined);
      (0, _expect2.default)(sheet.getRule('b')).to.not.be(undefined);
    });

    it('should compose classes', function () {
      (0, _expect2.default)(sheet.getRule('b').className).to.be('b-3696614589 a-3787690649 c d');
    });

    it('should generate correct CSS', function () {
      (0, _expect2.default)(sheet.toString()).to.be('.a-3787690649 {\n' + '  float: left;\n' + '}\n' + '.b-3696614589 {\n' + '  color: red;\n' + '}');
    });
  });

  describe('Nested compositions (compose composed)', function () {
    var sheet = void 0;

    beforeEach(function () {
      sheet = jss.createStyleSheet({
        a: {
          float: 'left'
        },
        b: {
          composes: ['$a', 'd'],
          color: 'red'
        },
        c: {
          composes: ['$b'],
          background: 'blue'
        }
      });
    });

    afterEach(function () {
      (0, _expect2.default)(warning).to.be(undefined);
    });

    it('should add rules', function () {
      (0, _expect2.default)(sheet.getRule('a')).to.not.be(undefined);
      (0, _expect2.default)(sheet.getRule('b')).to.not.be(undefined);
      (0, _expect2.default)(sheet.getRule('c')).to.not.be(undefined);
    });

    it('should compose classes', function () {
      (0, _expect2.default)(sheet.getRule('b').className).to.be('b-3337890504 a-3787690649 d');
      (0, _expect2.default)(sheet.getRule('c').className).to.be('c-3560954838 b-3337890504 a-3787690649 d');
    });

    it('should generate correct CSS', function () {
      (0, _expect2.default)(sheet.toString()).to.be('.a-3787690649 {\n' + '  float: left;\n' + '}\n' + '.b-3337890504 {\n' + '  color: red;\n' + '}\n' + '.c-3560954838 {\n' + '  background: blue;\n' + '}');
    });
  });

  describe('Warnings', function () {
    it('should warn when rule try to compose itself', function () {
      jss.createStyleSheet({
        a: {
          composes: ['$a'],
          color: 'red'
        }
      });
      (0, _expect2.default)(warning).to.be('[JSS] Cyclic composition detected. \r\n%s');
    });

    it('should warn when try to compose non-existant named selector', function () {
      jss.createStyleSheet({
        a: {
          composes: ['$b'],
          color: 'red'
        }
      });
      (0, _expect2.default)(warning).to.be('[JSS] Referenced rule is not defined. \r\n%s');
    });
  });
}); /* eslint-disable no-underscore-dangle */